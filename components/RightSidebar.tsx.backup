import React, { useState, useEffect } from 'react';
import { OllamaParameters, AIModel, SystemPromptRecord, ProviderType } from '../types';
import { SlidersHorizontal, Settings2, FileDown, Server, AlertTriangle, CheckCircle, Loader2, Save, Trash2, Edit3, Check, X, ChevronDown, ChevronUp, Info, PanelRightClose, PanelRightOpen } from 'lucide-react';
import { DEFAULT_SYSTEM_PROMPT, PROVIDER_CONFIGS } from '../constants';

interface RightSidebarProps {
  isOpen: boolean;
  onToggle: () => void;
  activeSystemPromptText: string;
  onActiveSystemPromptTextChange: (prompt: string) => void;

  selectedModel: string | null;
  setSelectedModel: (model: string | null) => void;

  parameters: OllamaParameters;
  onParameterChange: <K extends keyof OllamaParameters>(param: K, value: OllamaParameters[K]) => void;

  isLoading: boolean;
  onDownloadChat: () => void;

  providerType: ProviderType;
  onProviderTypeChange: (newType: ProviderType) => void;
  providerUrl: string;
  onProviderUrlChange: (newUrl: string) => void;
  providerApiKey: string;
  onProviderApiKeyChange: (newApiKey: string) => void;
  fetchedModels: AIModel[];
  isFetchingModels: boolean;
  providerStatus: 'idle' | 'connecting' | 'connected' | 'error';

  customModels: AIModel[];
  onAddCustomModel: (modelId: string, modelName: string) => void;
  onRemoveCustomModel: (modelId: string) => void;

  savedSystemPrompts: SystemPromptRecord[];
  selectedSystemPromptId: string | null;
  onSaveNewSystemPrompt: (title: string, prompt: string) => Promise<boolean>;
  onUpdateSelectedSystemPrompt: (id: string, title: string, prompt: string) => Promise<boolean>;
  onDeleteSelectedSystemPrompt: (id: string) => void;
  onSelectSavedSystemPrompt: (promptId: string | null) => void;

  currentConversationTokenCount?: number | null;
}

const AccordionSection: React.FC<{
  title: string;
  icon: React.ComponentType<{ size: number }>;
  defaultOpen?: boolean;
  isSidebarOpen: boolean;
  children: React.ReactNode;
}> = ({ title, icon: Icon, defaultOpen = false, isSidebarOpen, children }) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <div className="border-b border-gray-700">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`w-full flex items-center justify-between p-3 text-left hover:bg-gray-800 transition-colors ${!isSidebarOpen ? 'justify-center' : ''}`}
      >
        <div className="flex items-center">
          <Icon size={16} className="text-sky-400" />
          {isSidebarOpen && <span className="ml-2 text-sm font-medium text-gray-200">{title}</span>}
        </div>
        {isSidebarOpen && (
          isOpen ? <ChevronUp size={16} className="text-gray-400" /> : <ChevronDown size={16} className="text-gray-400" />
        )}
      </button>
      {isOpen && isSidebarOpen && (
        <div className="p-3 pt-0 space-y-3">
          {children}
        </div>
      )}
    </div>
  );
};

const ParameterInput: React.FC<{
  id: string;
  label: string;
  value: number;
  onChange: (value: number) => void;
  min: number;
  max: number;
  step: number;
  disabled: boolean;
  info?: string;
}> = ({ id, label, value, onChange, min, max, step, disabled, info }) => (
  <div>
    <label htmlFor={id} className="block text-xs font-medium text-gray-300 mb-1 flex justify-between items-center">
      <span>{label}</span>
      <span className="font-semibold text-sky-400">{value}</span>
    </label>
    <input
      type="range"
      id={id}
      min={min}
      max={max}
      step={step}
      value={value}
      onChange={(e) => onChange(parseFloat(e.target.value))}
      className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer accent-sky-500 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled={disabled}
    />
    {info && <p className="text-xs text-gray-400 mt-1">{info}</p>}
  </div>
);

const RightSidebar: React.FC<RightSidebarProps> = ({
  isOpen,
  onToggle,
  activeSystemPromptText,
  onActiveSystemPromptTextChange,
  selectedModel,
  setSelectedModel,
  parameters,
  onParameterChange,
  isLoading,
  onDownloadChat,
  providerType,
  onProviderTypeChange,
  providerUrl,
  onProviderUrlChange,
  providerApiKey,
  onProviderApiKeyChange,
  fetchedModels,
  isFetchingModels,
  providerStatus,
  customModels,
  onAddCustomModel,
  onRemoveCustomModel,
  savedSystemPrompts,
  selectedSystemPromptId,
  onSaveNewSystemPrompt,
  onUpdateSelectedSystemPrompt,
  onDeleteSelectedSystemPrompt,
  onSelectSavedSystemPrompt,
  currentConversationTokenCount,
}) => {
  const [editableProviderUrl, setEditableProviderUrl] = useState(providerUrl);
  const [editableProviderApiKey, setEditableProviderApiKey] = useState(providerApiKey);
  const [showPromptTitleModal, setShowPromptTitleModal] = useState<null | 'new' | 'update'>(null);
  const [promptTitleInput, setPromptTitleInput] = useState('');
  const [showAddModelModal, setShowAddModelModal] = useState(false);
  const [newModelId, setNewModelId] = useState('');
  const [newModelName, setNewModelName] = useState('');

  useEffect(() => {
    setEditableProviderUrl(providerUrl);
  }, [providerUrl]);

  useEffect(() => {
    setEditableProviderApiKey(providerApiKey);
  }, [providerApiKey]);

  const handleUrlSave = () => {
    onProviderUrlChange(editableProviderUrl);
  };

  const handleApiKeySave = () => {
    onProviderApiKeyChange(editableProviderApiKey);
  };

  const handleAddCustomModel = () => {
    if (!newModelId.trim()) return;
    
    const modelName = newModelName.trim() || newModelId.trim();
    onAddCustomModel(newModelId.trim(), modelName);
    
    setShowAddModelModal(false);
    setNewModelId('');
    setNewModelName('');
  };

  const handleSaveNewPromptClick = () => {
    setPromptTitleInput('');
    setShowPromptTitleModal('new');
  };

  const handleUpdateSelectedPromptClick = () => {
    if (selectedSystemPromptId) {
      const selected = savedSystemPrompts.find(p => p.id === selectedSystemPromptId);
      setPromptTitleInput(selected?.title || '');
      setShowPromptTitleModal('update');
    }
  };

  const handlePromptTitleSubmit = async () => {
    if (!promptTitleInput.trim()) {
      alert("Prompt title cannot be empty.");
      return;
    }
    let success = false;
    if (showPromptTitleModal === 'new') {
      success = await onSaveNewSystemPrompt(promptTitleInput, activeSystemPromptText);
    } else if (showPromptTitleModal === 'update' && selectedSystemPromptId) {
      success = await onUpdateSelectedSystemPrompt(selectedSystemPromptId, promptTitleInput, activeSystemPromptText);
    }
    if (success) {
      setShowPromptTitleModal(null);
      setPromptTitleInput('');
    }
  };

  const isChatSettingsDisabled = isLoading;
  const isServerSectionDisabled = isFetchingModels;
  const isCustomPrompt = selectedSystemPromptId === null && activeSystemPromptText !== DEFAULT_SYSTEM_PROMPT;

  return (
    <div
      className={`bg-gray-850 flex flex-col border-l border-gray-700 shadow-lg overflow-y-auto transition-all duration-300 ease-in-out relative
                  ${isOpen ? 'w-80 md:w-96 lg:w-[400px]' : 'w-20 items-center'}`}
    >
      <div className={`flex items-center justify-between p-3 border-gray-700 ${isOpen ? 'w-full' : 'w-20'}`}>
        <div>
          <button
            onClick={onToggle}
            title={isOpen ? "Collapse Sidebar" : "Expand Sidebar"}
            className={`absolute top-3 text-gray-400 hover:text-sky-400 transition-colors z-10
                    ${isOpen ? 'left-3' : 'left-1/2 -translate-x-1/2'}`}
          >
            {isOpen ? <PanelRightClose size={20} /> : <PanelRightOpen size={20} />}
          </button>
        </div>
        <div>
          {isOpen && currentConversationTokenCount !== null && currentConversationTokenCount !== undefined && currentConversationTokenCount > 0 && (
            <div className="pt-0">
              <label className="block text-xs font-medium text-gray-300">Tokens Count: {currentConversationTokenCount ?? ""}</label>
            </div>
          )}
        </div>
      </div>

      <div className={isOpen ? 'pt-4' : 'pt-5 w-full'}>
        <AccordionSection title="AI Provider" icon={Server} defaultOpen={true} isSidebarOpen={isOpen}>
          {isOpen && (
            <>
              <div>
                <label htmlFor="provider-select" className="block text-xs font-medium text-gray-300 mb-1">
                  Provider
                </label>
                <select
                  id="provider-select"
                  value={providerType}
                  onChange={(e) => onProviderTypeChange(e.target.value as ProviderType)}
                  className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-xs text-gray-200 disabled:opacity-70"
                  disabled={isServerSectionDisabled}
                >
                  {Object.entries(PROVIDER_CONFIGS).map(([key, config]) => (
                    <option key={key} value={key}>
                      {config.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="mt-3">
                <label htmlFor="provider-url" className="block text-xs font-medium text-gray-300 mb-1">
                  API URL
                </label>
                <div className="flex space-x-2">
                  <input
                    type="text"
                    id="provider-url"
                    value={editableProviderUrl}
                    onChange={(e) => setEditableProviderUrl(e.target.value)}
                    placeholder={PROVIDER_CONFIGS[providerType as keyof typeof PROVIDER_CONFIGS].defaultUrl}
                    className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-xs text-gray-200 disabled:opacity-70"
                    disabled={isServerSectionDisabled}
                  />
                  <button
                    onClick={handleUrlSave}
                    disabled={isServerSectionDisabled || editableProviderUrl === providerUrl}
                    title="Save URL and Fetch Models"
                    className="p-2 bg-sky-600 hover:bg-sky-700 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
                  >
                    {isFetchingModels ? <Loader2 size={18} className="animate-spin" /> : <Save size={18} />}
                  </button>
                </div>
              </div>

              {PROVIDER_CONFIGS[providerType as keyof typeof PROVIDER_CONFIGS].requiresApiKey && (
                <div className="mt-3">
                  <label htmlFor="provider-api-key" className="block text-xs font-medium text-gray-300 mb-1">
                    API Key {PROVIDER_CONFIGS[providerType as keyof typeof PROVIDER_CONFIGS].requiresApiKey ? '(Required)' : '(Optional)'}
                  </label>
                  <div className="flex space-x-2">
                    <input
                      type="password"
                      id="provider-api-key"
                      value={editableProviderApiKey}
                      onChange={(e) => setEditableProviderApiKey(e.target.value)}
                      placeholder="Enter your API key"
                      className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-xs text-gray-200 disabled:opacity-70"
                      disabled={isServerSectionDisabled}
                    />
                    <button
                      onClick={handleApiKeySave}
                      disabled={isServerSectionDisabled || editableProviderApiKey === providerApiKey}
                      title="Save API Key"
                      className="p-2 bg-sky-600 hover:bg-sky-700 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
                    >
                      <Save size={18} />
                    </button>
                  </div>
                </div>
              )}

              <div className="text-xs text-gray-400 h-4 mt-1">
                {isFetchingModels && <span className="flex items-center"><Loader2 size={14} className="animate-spin mr-1" />Connecting...</span>}
                {providerStatus === 'connected' && !isFetchingModels && <span className="text-green-400 flex items-center"><CheckCircle size={14} className="mr-1" />Connected</span>}
                {providerStatus === 'error' && !isFetchingModels && <span className="text-red-400 flex items-center"><AlertTriangle size={14} className="mr-1" />Error</span>}
                {providerStatus === 'idle' && !isFetchingModels && <span>Status: Idle</span>}
              </div>
            </>
          )}
        </AccordionSection>

        <AccordionSection title="Chat Configuration" icon={Settings2} defaultOpen={true} isSidebarOpen={isOpen}>
          {isOpen && (
            <>
              <div>
                <div className="flex justify-between items-center mb-1">
                  <label htmlFor="model-select" className="block text-xs font-medium text-gray-300">Model</label>
                  <button
                    onClick={() => setShowAddModelModal(true)}
                    disabled={isChatSettingsDisabled}
                    title="Add Custom Model"
                    className="text-xs flex items-center p-1 bg-green-600 hover:bg-green-700 rounded disabled:opacity-50"
                  >
                    <span className="text-sm mr-1">+</span> Add Model
                  </button>
                </div>
                <select
                  id="model-select"
                  value={selectedModel || ''}
                  onChange={(e) => setSelectedModel(e.target.value || null)}
                  className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-xs text-gray-200 disabled:opacity-70"
                  disabled={isChatSettingsDisabled || isFetchingModels}
                >
                  <option value="" disabled={selectedModel !== null}>
                    {isFetchingModels ? "Loading..." : "Select model"}
                  </option>
                  {fetchedModels.length > 0 && (
                    <optgroup label="Available Models">
                      {fetchedModels.map(model => (
                        <option key={model.id} value={model.id}>{model.name}</option>
                      ))}
                    </optgroup>
                  )}
                  {customModels.length > 0 && (
                    <optgroup label="Custom Models">
                      {customModels.map(model => (
                        <option key={model.id} value={model.id}>
                          {model.name} (custom)
                        </option>
                      ))}
                    </optgroup>
                  )}
                  {selectedModel && 
                   !fetchedModels.some(m => m.id === selectedModel) && 
                   !customModels.some(m => m.id === selectedModel) && (
                    <option key={selectedModel} value={selectedModel} disabled>
                      {selectedModel} (unavailable)
                    </option>
                  )}
                </select>
                {customModels.length > 0 && (
                  <div className="mt-2">
                    <label className="block text-xs font-medium text-gray-400 mb-1">Manage Custom Models</label>
                    <div className="space-y-1">
                      {customModels.map(model => (
                        <div key={model.id} className="flex items-center justify-between text-xs bg-gray-800 p-2 rounded">
                          <span className="text-gray-300">{model.name} ({model.id})</span>
                          <button
                            onClick={() => onRemoveCustomModel(model.id)}
                            disabled={isChatSettingsDisabled}
                            title="Remove Custom Model"
                            className="text-red-400 hover:text-red-300 disabled:opacity-50"
                          >
                            <X size={14} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <div className="space-y-2 pt-2">
                <label className="block text-xs font-medium text-gray-300">System Prompt</label>
                <select
                  value={selectedSystemPromptId || (isCustomPrompt ? "custom" : "default")}
                  onChange={(e) => {
                    if (e.target.value === "custom" || e.target.value === "default") {
                      onSelectSavedSystemPrompt(null);
                      if (e.target.value === "default") onActiveSystemPromptTextChange(DEFAULT_SYSTEM_PROMPT);
                    } else {
                      onSelectSavedSystemPrompt(e.target.value);
                    }
                  }}
                  className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md text-xs text-gray-200 focus:ring-sky-500 focus:border-sky-500 disabled:opacity-70"
                  disabled={isChatSettingsDisabled}
                >
                  <option value="default" disabled={activeSystemPromptText === DEFAULT_SYSTEM_PROMPT && !selectedSystemPromptId}>Default</option>
                  {isCustomPrompt && !selectedSystemPromptId && <option value="custom" disabled>Custom (unsaved)</option>}
                  {savedSystemPrompts.map(sp => (
                    <option key={sp.id} value={sp.id}>{sp.title}</option>
                  ))}
                </select>

                <textarea
                  id="system-prompt"
                  rows={5}
                  className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-xs text-gray-200 resize-y disabled:opacity-70"
                  value={activeSystemPromptText}
                  onChange={(e) => onActiveSystemPromptTextChange(e.target.value)}
                  placeholder="Define assistant behavior..."
                  disabled={isChatSettingsDisabled}
                />
                <div className="flex flex-wrap gap-2 items-center">
                  <button onClick={handleSaveNewPromptClick} disabled={isChatSettingsDisabled} title="Save as New Prompt" className="text-xs flex items-center p-1.5 bg-green-600 hover:bg-green-700 rounded disabled:opacity-50"><Save size={14} className="mr-1" /> Save New</button>
                  <button onClick={handleUpdateSelectedPromptClick} disabled={isChatSettingsDisabled || !selectedSystemPromptId} title="Update Selected Prompt" className="text-xs flex items-center p-1.5 bg-sky-600 hover:bg-sky-700 rounded disabled:opacity-50"><Edit3 size={14} className="mr-1" /> Update Sel.</button>
                  <button onClick={() => selectedSystemPromptId && window.confirm("Delete this saved prompt?") && onDeleteSelectedSystemPrompt(selectedSystemPromptId)} disabled={isChatSettingsDisabled || !selectedSystemPromptId} title="Delete Selected Prompt" className="text-xs flex items-center p-1.5 bg-red-600 hover:bg-red-700 rounded disabled:opacity-50"><Trash2 size={14} className="mr-1" /> Delete Sel.</button>
                </div>
              </div>
            </>
          )}
        </AccordionSection>

        <AccordionSection title="Parameters" icon={SlidersHorizontal} isSidebarOpen={isOpen}>
          {isOpen && (
            <>
              <ParameterInput
                id="temperature"
                label="Temperature"
                value={parameters.temperature}
                onChange={(v) => onParameterChange('temperature', v)}
                min={0} max={2} step={0.01}
                disabled={isChatSettingsDisabled}
                info="Controls randomness. Lower is more deterministic."
              />
              <ParameterInput
                id="top-p"
                label="Top P"
                value={parameters.topP}
                onChange={(v) => onParameterChange('topP', v)}
                min={0} max={1} step={0.01}
                disabled={isChatSettingsDisabled}
                info="Nucleus sampling. Considers tokens with P% cumulative probability."
              />
              <div>
                <label htmlFor="num_predict" className="block text-xs font-medium text-gray-300 mb-1 flex justify-between items-center">
                  <span>Max Response Tokens</span>
                  <span className="font-semibold text-sky-400">{parameters.num_predict <= 0 ? 'Model Default' : parameters.num_predict}</span>
                </label>
                <input
                  type="number"
                  id="num_predict"
                  value={parameters.num_predict <= 0 ? '' : parameters.num_predict}
                  onChange={(e) => onParameterChange('num_predict', parseInt(e.target.value, 10) || -1)}
                  placeholder="Default"
                  className="w-full p-2 mt-1 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 text-xs text-gray-200 disabled:opacity-70"
                  min={-1} step={1}
                  disabled={isChatSettingsDisabled}
                />
                <p className="text-xs text-gray-400 mt-1">Set to -1 for model default, 0 for unlimited.</p>
              </div>
            </>
          )}
        </AccordionSection>
      </div>

      <div className={`mt-auto border-t border-gray-700 ${isOpen ? 'p-3' : 'p-3 w-full'}`}>
        <button
          onClick={onDownloadChat}
          disabled={isLoading}
          title="Download Chat"
          className={`w-full flex items-center justify-center px-4 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed
                      ${!isOpen ? 'px-2' : ''}`}
        >
          <FileDown size={isOpen ? 18 : 22} className={isOpen ? 'mr-2' : ''} />
          {isOpen && "Download Chat"}
        </button>
      </div>

      {showPromptTitleModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-md space-y-4">
            <h3 className="text-lg font-semibold text-sky-400">
              {showPromptTitleModal === 'new' ? 'Save New System Prompt' : 'Update System Prompt Title'}
            </h3>
            <input
              type="text"
              value={promptTitleInput}
              onChange={(e) => setPromptTitleInput(e.target.value)}
              placeholder="Enter prompt title"
              className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md text-sm text-gray-200 focus:ring-sky-500 focus:border-sky-500"
              autoFocus
            />
            <div className="flex justify-end space-x-3">
              <button onClick={() => setShowPromptTitleModal(null)} className="px-4 py-2 text-sm rounded-md text-gray-300 hover:bg-gray-700 transition-colors"><X size={16} className="inline mr-1" />Cancel</button>
              <button onClick={handlePromptTitleSubmit} className="px-4 py-2 text-sm rounded-md bg-sky-600 hover:bg-sky-700 text-white transition-colors"><Check size={16} className="inline mr-1" />Save</button>
            </div>
          </div>
        </div>
      )}

      {showAddModelModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-md space-y-4">
            <h3 className="text-lg font-semibold text-green-400">Add Custom Model</h3>
            <div className="space-y-3">
              <div>
                <label className="block text-xs font-medium text-gray-300 mb-1">Model ID (Required)</label>
                <input
                  type="text"
                  value={newModelId}
                  onChange={(e) => setNewModelId(e.target.value)}
                  placeholder="e.g., gpt-4, claude-3-opus, my-custom-model"
                  className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md text-sm text-gray-200 focus:ring-green-500 focus:border-green-500"
                  autoFocus
                />
                <p className="text-xs text-gray-400 mt-1">This is the exact model name to send to the API</p>
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-300 mb-1">Display Name (Optional)</label>
                <input
                  type="text"
                  value={newModelName}
                  onChange={(e) => setNewModelName(e.target.value)}
                  placeholder="Friendly name for display"
                  className="w-full p-2 bg-gray-700 border border-gray-600 rounded-md text-sm text-gray-200 focus:ring-green-500 focus:border-green-500"
                />
                <p className="text-xs text-gray-400 mt-1">If empty, will use the Model ID</p>
              </div>
            </div>
            <div className="flex justify-end space-x-3">
              <button 
                onClick={() => {
                  setShowAddModelModal(false);
                  setNewModelId('');
                  setNewModelName('');
                }} 
                className="px-4 py-2 text-sm rounded-md text-gray-300 hover:bg-gray-700 transition-colors"
              >
                <X size={16} className="inline mr-1" />Cancel
              </button>
              <button 
                onClick={handleAddCustomModel} 
                disabled={!newModelId.trim()}
                className="px-4 py-2 text-sm rounded-md bg-green-600 hover:bg-green-700 text-white transition-colors disabled:opacity-50"
              >
                <Check size={16} className="inline mr-1" />Add Model
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RightSidebar;

export default RightSidebar;